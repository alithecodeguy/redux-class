"Redux Toolkit" is already written in TypeScript, so its TS type definitions are built in.
"React Redux" has its type definitions in a separate @types/react-redux typedefs package on NPM.
In addition to typing the library functions, the types also export some helpers to make it easier to write typesafe interfaces between your Redux store and your React components.
As of React Redux v7.2.3, the react-redux package has a dependency on @types/react-redux, so the type definitions will be automatically installed with the library.
Otherwise, you'll need to manually install them yourself (typically npm install @types/react-redux).

1- Initial a basic create-react-app project using one of the following approach:

    # Using local create-react-app library
    npm i -g create-react-app
    create-react-app cra_using_redux_ts --template typescript
    # Using npx
    npx create-react-app cra_using_redux_ts --template typescript

then install the redux tollkit library:

    npm i @reduxjs/toolkit react-redux

2- Create a Redux Store
Redux Toolkit's configureStore API should not need any additional typings.
You will, however, want to extract the RootState type and the Dispatch type so that they can be referenced as needed.
Inferring these types from the store itself means that they correctly update as you add more state slices or modify middleware settings.
Since those are types, it's safe to export them directly from your store setup file such as app/store.ts and import them directly into other files.
Create a file named src/app/store.ts. Import the configureStore API from Redux Toolkit.
This creates a Redux store, and also automatically configure the Redux DevTools extension so that you can inspect the store while developing.

    import { configureStore } from '@reduxjs/toolkit'

    const store = configureStore({
    reducer: {}
    })

    export default store

    // Infer the `RootState` and `AppDispatch` types from the store itself
    export type RootState = ReturnType<typeof store.getState>
    // Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}
    export type AppDispatch = typeof store.dispatch

3- Define Typed Hooks​
While it's possible to import the RootState and AppDispatch types into each component,
it's better to create typed versions of the useDispatch and useSelector hooks for usage in your application.
This is important for a couple reasons:

    - For useSelector, it saves you the need to type (state: RootState) every time
    - For useDispatch, the default Dispatch type does not know about thunks.
    In order to correctly dispatch thunks, you need to use the specific customized AppDispatch type from the store that includes the thunk middleware types,
    and use that with useDispatch. Adding a pre-typed useDispatch hook keeps you from forgetting to import AppDispatch where it's needed.
    Since these are actual variables, not types, it's important to define them in a separate file such as app/hooks.ts, not the store setup file.
    This allows you to import them into any component file that needs to use the hooks, and avoids potential circular import dependency issues.

    import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
    import type { RootState, AppDispatch } from './store'

    // Use throughout your app instead of plain `useDispatch` and `useSelector`
    export const useAppDispatch = () => useDispatch<AppDispatch>()
    export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector

4- Provide the Redux Store to React
Once the store is created, we can make it available to our React components by putting a React-Redux <Provider> around our application in src/index.js.
Import the Redux store we just created, put a <Provider> around your <App>, and pass the store as a prop:

    import React from 'react'
    import ReactDOM from 'react-dom'
    import './index.css'
    import App from './App'
    import store from './app/store'
    import { Provider } from 'react-redux'

    ReactDOM.render(
        <Provider store={store}>
            <App />
        </Provider>,
        document.getElementById('root')
    )

5- Create a Redux State Slice​
Add a new file named src/features/counter/counterSlice.ts. In that file, import the createSlice API from Redux Toolkit.
Creating a slice requires a string name to identify the slice, an initial state value, and one or more reducer functions to define how the state can be updated.
Once a slice is created, we can export the generated Redux action creators and the reducer function for the whole slice.
Redux requires that we write all state updates immutably, by making copies of data and updating the copies.
However, Redux Toolkit's createSlice and createReducer APIs use Immer inside to allow us to write "mutating" update logic that becomes correct immutable updates.
Each slice file should define a type for its initial state value, so that createSlice can correctly infer the type of state in each case reducer.
All generated actions should be defined using the PayloadAction<T> type from Redux Toolkit, which takes the type of the action.payload field as its generic argument.
You can safely import the RootState type from the store file here. It's a circular import, but the TypeScript compiler can correctly handle that for types.
This may be needed for use cases like writing selector functions.
Add the following lines to counterSlice.ts :

    import { createSlice, PayloadAction } from '@reduxjs/toolkit'
    import type { RootState } from '../../app/store'

    // Define a type for the slice state
    interface CounterState {
    value: number
    }

    // Define the initial state using that type
    const initialState: CounterState = {
    value: 0
    }

    export const counterSlice = createSlice({
    name: 'counter',
    // `createSlice` will infer the state type from the `initialState` argument
    initialState,
    reducers: {
        increment: state => {
        state.value += 1
        },
        decrement: state => {
        state.value -= 1
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action: PayloadAction<number>) => {
        state.value += action.payload
        }
    }
    })

    export const { increment, decrement, incrementByAmount } = counterSlice.actions

    // Other code such as selectors can use the imported `RootState` type
    export const selectCount = (state: RootState) => state.counter.value

    export default counterSlice.reducer


The generated action creators will be correctly typed to accept a payload argument based on the PayloadAction<T> type you provided for the reducer.
For example, incrementByAmount requires a number as its argument.
In some cases, TypeScript may unnecessarily tighten the type of the initial state.
If that happens, you can work around it by casting the initial state using as, instead of declaring the type of the variable:\

    // Workaround: cast state instead of declaring variable type
    const initialState = {
    value: 0
    } as CounterState

6- Add Slice Reducers to the Store​
Next, we need to import the reducer function from the counter slice and add it to our store.
By defining a field inside the reducer parameter, we tell the store to use this slice reducer function to handle all updates to that state.
Change the store.js to this:

    import { configureStore } from '@reduxjs/toolkit'
    import counterReducer from '../features/counter/counterSlice'

    const store = configureStore({
    reducer: {
        counter: counterReducer,
    }
    })

    // Infer the `RootState` and `AppDispatch` types from the store itself
    export type RootState = ReturnType<typeof store.getState>
    // Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}
    export type AppDispatch = typeof store.dispatch

7- Use Redux State and Actions in React Components​
Now we can use the React-Redux hooks to let React components interact with the Redux store.
In component files, import the pre-typed hooks instead of the standard hooks from React-Redux.
Create a src/features/counter/Counter.tsx file with a <Counter> component inside, then import that component into App.js and render it inside of <App>.

    import React from "react";
    import { useAppSelector, useAppDispatch } from '../../app/hooks'
    import { decrement, increment } from "./counterSlice";

    export default function Counter() {
        // The `state` arg is correctly typed as `RootState` already
        const count = useAppSelector(state => state.counter.value)
        const dispatch = useAppDispatch()

        return (
            <div>
            <div>
                <button
                aria-label="Increment value"
                onClick={() => dispatch(increment())}
                >
                Increment
                </button>
                <span>{count}</span>
                <button
                aria-label="Decrement value"
                onClick={() => dispatch(decrement())}
                >
                Decrement
                </button>
            </div>
            </div>
        );
    }


8. Change the App.tsx content to :

    import React from 'react';
    import logo from './logo.svg';
    import './App.css';

    function App() {
    return (
        <div className="App">
        <header className="App-header">
            <img src={logo} className="App-logo" alt="logo" />
            <p>
            Edit <code>src/App.tsx</code> and save to reload.
            </p>
            <a
            className="App-link"
            href="https://reactjs.org"
            target="_blank"
            rel="noopener noreferrer"
            >
            Learn React
            </a>
        </header>
        </div>
    );
    }

    export default App;




github repository :
https://github.com/alithecodeguy/redux-ts-cra-example

